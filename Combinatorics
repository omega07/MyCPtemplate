***   arranging r objects from a pool of n objects with alike and different objects
--> make cases .... for eg.case1: 2 alike 1 diff 
                           case2: 4 alike 1 diff and 1 diff and so on

***   selecting r objects from a pool of alike and different objects
--> for eg. 4->o1,2->o2 etc.
now here we use solution --> x1+x2+x3... = r;
where we can say that x1 is the amt of objects recieved by person1 and so on ... since here only the number of objects given to a person
matters and not which objects
solution --> nCr(n+r-1 , r-1)
this solution gives all the combinations of 0 <= (x1,x2,x3..) <= n

***   if you are given some restriction on x1,x2 etc .that can be solved using binomial theorem
Solution ---> suppose x1+x2+x3...+xr = n and w1 <= x1 <= q1 ; w2 <= x2 <= q2 ; w3 <= x3 <= q3....and so on
then solution is coefficient of x raised to n ( pow(x,n) ) in the expansion of { ( x^w1 + x^(w1+1) + ... + x^q1 ) * ( x^w2 + x^(w2+1) + .. + x^q2 ) * (...) .. [r terms for x1,x2,x3..xr] }
to find the coefficient you can use basic GP formula for sum of a GP..

***   if there is a circular permutation and clockwise and anti- dont matter then the number of permutations is (n-1)!/2
      else if it matters then (n-1)!
      
***   Principle of inclusion and exclusion --> number of valid ways = total number of ways-(number of ways in which atleast 1 condition fails)+(number of ways in which atleast 2 condition fails)-(..3)+(..4)...


***   Derangement - suppose there are n colored n boxes and n colored balls , arrange the balls in the boxes such that 1 ball in each box
                    and for no 2 balls the color of the ball and box match.
                    !n (derangement) = n!*[1 - (1/1!) + (1/2!) - (1/3!) .... upto n]
      
      suppose you want to put exactly k balls in the boxes correctly ,so the number of ways would be to select k balls from n balls
      and then derange the remaining (n-k) balls into (n-k) boxes!!
      --> nCr(n,k)*(n-k)!*[1 - (1/1!) + (1/2!) - (1/3!) ....]
      
      PROOF - works on inclusion and exclusion --> number of ways to arrange all balls - number of ways in which 1 ball goes into the correct + number of ways 2 balls goes into the correct -.....
               n! - nCr(n,1)*(n-1)! + nCr(n,2)*(n-2)! -....upto n
      
               
***   n identical objects in k distinct bins - # no restriction - nCr(n+k-1,n-1)
                                               # atleast 1 object in each - nCr(n-1,k-1)
***   n identical objects in any number of partitions - # Here it cannot be with no restriction.
                                                        # atleast one object in each - nCr(n-1,1-1) + nCr(n-1,2-1) + ..... + nCr(n-1,n-1).
***   n distinct objects in k identical bins - can be thought of as partitioning a set with n elements - {1,2,3...n} into k subsets.
                                               # atleast one in every part - i.e k non-empty subsets - S(n,k) - stirling numbers of second type
                                                                                                       it can be given by a recurrence relation - S(n,k) = S(n-1,k-1) + k*S(n-1,k).
                                                                                                       where S(n,n)=S(1,1)=S(0,0)=1.
                                                                                                             S(n,0) = 0 for all n>=1
THESE WERE THE STIRLING NUMBERS OF THE SECOND TYPE...                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                                                                                                             
HERE ARE THE STIRLING NUMBERS OF THE FIRST TYPE DENOTED BY - SF(n,k)                                               
                                               # THEY have a number thereotic defn :: SF(n,k) gives the sum of product of numbers taken n-k at a time from  the set of
                                                 (n-1) numbers i.e {1,2,3,....,n-1}.
                                                 WRITTEN WITH A RECURRENCE - SF(n,k) = SF(n-1,k-1) + (n-1)*SF(n,k-1).
                                                                             SF(n,1) = n-1 for all n > 1.
                                                                             SF(n,n) = 0.
                                                                             SF(n,0) = PI(i) for all 1<=i<=(n-1).... PI denotes the product.
                                                 Example - SF(4,2) gives the sum of product of 2 numbers taken at a time for {1,2,3}.
                                                           SF(4,2) = 1.2 + 1.3 + 2.3 = 11.
    
