/*
    PROBLEM STATEMENT : Given n, k; construct an array of n elements with exactly k coprime pairs
    IDEA : we want x = nC2 - k pairs which are non coprime ... write n primes starting from 5 and then 
           multiply each element starting from the 1st element by 2 and as soon as you multiply 2nd element
           by 2 you will get 1 pair which is coprime .. then if 3rd element is multiplied then you get 2 pairs
           coprime and so ... so if you multiply z elements then you will get 1 + 2 + 3 .. + (z-1) = (z*(z-1))/2
           hence you go till this is less than or equal to x and then multiply (z+1) element by 3
           and then if you multiply the zth element by 3 then this forms a pair with the (z+1)th element
           then if you multiply by 3 the (z-1)th element .. this forms pair with z and (z+1)th 
           element but there already exist pair with zth element so only 1 more pair is added ..
           and in this way we get 1 + 1 + 1 .. and so on we get to x ..
*/
#include <bits/stdc++.h>
#define vi vector<int>
#define pb push_back
#define vii vector<pair<int,int>>
#define int long long
using namespace std;

vector<int> primes;
const int NN = 1e6+1;
int prime[NN];
void seive(){
    int i;
    for(i=1;i<NN;i++) prime[i] = i;
    prime[0] = prime[1] = 0;
    for(i=2; i < NN; i++){
        if (prime[i] == i){
 
            for(int j = 2*i; j < NN; j += i)
                if (prime[j] == j)
                    prime[j] = i;
        }
    }
   for(i=2; i<NN; i++) if(prime[i]==i) primes.pb(i);
}

#define f(i) (i*(i-1))/2
int32_t main() {
    seive();
    int n,k;
    cin>>n>>k;
    vi x(n);
    int cnt = 0;
    for(int i=2;i<n+2;i++) x[i-2] = primes[i];
    int kx = (n*(n-1))/2 - k;
    int z = 0;
    while(f(z) <= kx) z++;
    z--;
    int go = f(z);
    for(int j=0;j<z;j++) x[j] *= 2;
    int diff = kx-go;
    if(diff) {
        x[z] *= 3;
        for(int j=0;j<diff;j++) x[j] *= 3;
    }
    for(int i=0;i<n;i++) cout<<x[i]<<" ";
    return 0;
}
