/*                                 ___ _____ 
  ___  _ __ ___   ___  __ _  __ _ / _ \___  |
 / _ \| '_ ` _ \ / _ \/ _` |/ _` | | | | / / 
| (_) | | | | | |  __/ (_| | (_| | |_| |/ /  
 \___/|_| |_| |_|\___|\__, |\__,_|\___//_/   
                      |___/            
*/

//https://discord.com/channels/719165954013265971/719829947996176457/720322940771762188
// Getting better at it ! ! !
#include <bits/stdc++.h>
#include <string.h>
#define int long long
#define MAX (int)(1e7+5)
#define MAX2D (int)(1e3+5)
#define itn int
#define inf 5e18
#define MOD (int)(1e9 + 7)
#define pb push_back
#define mk make_pair
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(),x.rend()
#define sitr set<int>::iterator
#define mitr map<int, int>::iterator
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define vll vector<unsigned int>
#define test  \
    int t;    \
    cin >> t; \
    while (t--)
#define fast                       \
    ios_base ::sync_with_stdio(0); \
    cin.tie(NULL);                 \
    cout.tie(NULL)
using namespace std;

// Binary Search in a sorted rotated array.
// 1) Binary search to find the index at which it was rotated.
// Idea : Compare the mid with the first or the last element.
//        If the mid is greater than the first element, then this means that we are looking
//        in the second half of the array and we have to move to the right.
//        Else if less than it might be a possible answer and move to the left.
//eg. 7
//    3 4 5 6 0 1 2 ... a[mid] = 6, so it is greater than the first element and hence our
//                                  rotation index lies to the right
//                      a[mid] = 1, so it is less than the first element and hence this could
//                                  be a possible ans .. and move to the left ..... and so on.
// 2) Binary search of the 2 halves partitioned at index of rotation.

signed main()
{
    fast;
    int n;
    cin>>n;
    vi a(n);
    for(int i=0;i<n;i++) cin>>a[i];
    auto f = [&]() {
        int l = 0, r = n-1;
        int ans = l;
        while(l <= r) {
            int mid = (l+r)/2;
            if(a[mid] <= a[0]) ans = mid, r = mid-1;
            else l = mid+1;
        }
        return ans;
    };
    int index = f();
    int target;
    cin>>target;
    if(binary_search(a.begin(),a.begin()+index,target) || binary_search(a.begin()+index,a.end(),target)) 
        cout<<"Yes";
    else 
        cout<<"No";
    return 0;
}


/*
max factors number = 720720 --> 240 factors
max factors number = 1441440 -->288 factors

Beautiful program
Please run for me.
I've tried you in BASIC,
FORTRAN and C.
Beautiful program,
You've errors galore.
And each time I run you,
You're swapped out of core.
*/
